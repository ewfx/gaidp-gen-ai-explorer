from flask import Flask, request, jsonify
import pandas as pd
import os
import google.generativeai as genai
import logging
from flask_cors import CORS
import json  # Add this at the top

# Configure logging
logging.basicConfig(
    filename="flask_app.log",  # Log file name
    level=logging.INFO,  # Log level (DEBUG, INFO, WARNING, ERROR)
    format="%(asctime)s - %(levelname)s - %(message)s"
)

app = Flask(__name__)
CORS(app)
# Configure Gemini API
genai.configure(api_key="AIzaSyC53wvzp-W7_IH_xrVjM0W8w6ywy8h8Op8")
model = genai.GenerativeModel("gemini-1.5-pro")

def get_excel_data(file_path):
    """Extract column names and sample data from the given Excel file."""
    logging.info(f"Reading Excel file: {file_path}")
    df = pd.read_excel(file_path, sheet_name=0)  # Read first sheet
    logging.info(f"Extracted columns: {df.columns.tolist()}")
    return df.columns.tolist(), df.sample(min(5, len(df))).to_dict(orient='records')  # Sample data (max 5 rows)


import json


def generate_rules_gemini(columns, sample_data, num_rules):
    """Use Gemini LLM to generate validation rules based on column names and sample data."""
    prompt = f"""
    Generate exactly {num_rules} unique validation rules for the dataset.
    Columns: {', '.join(columns)}
    Sample Data: {sample_data}
    Respond strictly in valid JSON format as:
    [
        {{"Rule Name": "<Rule Title>", "Description": "<Validation Logic>"}},
        ...
    ]
    """
    response = model.generate_content(prompt)

    if response and response.candidates:
        try:
            # Extract JSON text from response
            rules_text = response.candidates[0].content.parts[0].text.strip()

            # Ensure we remove any leading markdown indicators (like ```json)
            if rules_text.startswith("```json"):
                rules_text = rules_text[7:].strip("```")

            rules = json.loads(rules_text)  # Parse JSON
            return rules if isinstance(rules, list) else []
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")  # Debugging
            return []

    return []


@app.route('/generate_rules', methods=['POST'])
def generate_rules_api():
    try:
        # Read parameters
        request_data = request.json
        num_rules = int(request_data.get('num_rules', 5))
        file_path = request_data.get('excelTemplate')

        logging.info(f"Received request: num_rules={num_rules}, file_path={file_path}")

        if not file_path or not os.path.exists(file_path):
            logging.error("File not found error.")
            return jsonify({"error": "File not found"}), 400

        # Extract column names and sample data
        columns, sample_data = get_excel_data(file_path)

        # Generate rules using Gemini LLM
        rules = generate_rules_gemini(columns, sample_data, num_rules)

        if not rules:
            logging.warning("No rules generated by Gemini.")
            return jsonify({"error": "Failed to generate rules"}), 500

        # Save rules to Excel
        rules_df = pd.DataFrame(rules)

        with pd.ExcelWriter(file_path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
            rules_df.to_excel(writer, sheet_name='rules', index=False)

        logging.info(f"Successfully generated {len(rules)} rules.")

        return jsonify({"message": "Rules generated successfully", "rules_count": len(rules), "rules": rules})

    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(port=5001, debug=True)
